/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface LearningMarketplaceInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "courseRevenue"
      | "courses"
      | "createCourse"
      | "getCourse"
      | "nextCourseId"
      | "owner"
      | "paymentToken"
      | "platformFee"
      | "purchaseCourse"
      | "renounceOwnership"
      | "toggleCourseStatus"
      | "transferOwnership"
      | "updateCourse"
      | "updatePlatformFee"
      | "userHasAccess"
      | "withdrawRevenue"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "CourseCreated"
      | "CoursePurchased"
      | "CourseStatusChanged"
      | "CourseUpdated"
      | "OwnershipTransferred"
      | "RevenueWithdrawn"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "courseRevenue",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "courses",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createCourse",
    values: [BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCourse",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "nextCourseId",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "paymentToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "platformFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "purchaseCourse",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "toggleCourseStatus",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateCourse",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePlatformFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userHasAccess",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawRevenue",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "courseRevenue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "courses", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createCourse",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getCourse", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nextCourseId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "paymentToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "platformFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "purchaseCourse",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "toggleCourseStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateCourse",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePlatformFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userHasAccess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawRevenue",
    data: BytesLike
  ): Result;
}

export namespace CourseCreatedEvent {
  export type InputTuple = [
    courseId: BigNumberish,
    creator: AddressLike,
    price: BigNumberish,
    metadataURI: string
  ];
  export type OutputTuple = [
    courseId: bigint,
    creator: string,
    price: bigint,
    metadataURI: string
  ];
  export interface OutputObject {
    courseId: bigint;
    creator: string;
    price: bigint;
    metadataURI: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CoursePurchasedEvent {
  export type InputTuple = [courseId: BigNumberish, student: AddressLike];
  export type OutputTuple = [courseId: bigint, student: string];
  export interface OutputObject {
    courseId: bigint;
    student: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CourseStatusChangedEvent {
  export type InputTuple = [courseId: BigNumberish, active: boolean];
  export type OutputTuple = [courseId: bigint, active: boolean];
  export interface OutputObject {
    courseId: bigint;
    active: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CourseUpdatedEvent {
  export type InputTuple = [
    courseId: BigNumberish,
    price: BigNumberish,
    metadataURI: string
  ];
  export type OutputTuple = [
    courseId: bigint,
    price: bigint,
    metadataURI: string
  ];
  export interface OutputObject {
    courseId: bigint;
    price: bigint;
    metadataURI: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RevenueWithdrawnEvent {
  export type InputTuple = [creator: AddressLike, amount: BigNumberish];
  export type OutputTuple = [creator: string, amount: bigint];
  export interface OutputObject {
    creator: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface LearningMarketplace extends BaseContract {
  connect(runner?: ContractRunner | null): LearningMarketplace;
  waitForDeployment(): Promise<this>;

  interface: LearningMarketplaceInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  courseRevenue: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  courses: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, string, boolean, bigint] & {
        creator: string;
        price: bigint;
        metadataURI: string;
        active: boolean;
        revenueShare: bigint;
      }
    ],
    "view"
  >;

  createCourse: TypedContractMethod<
    [price: BigNumberish, metadataURI: string, revenueShare: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  getCourse: TypedContractMethod<
    [courseId: BigNumberish],
    [
      [string, bigint, string, boolean, bigint] & {
        creator: string;
        price: bigint;
        metadataURI: string;
        active: boolean;
        revenueShare: bigint;
      }
    ],
    "view"
  >;

  nextCourseId: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  paymentToken: TypedContractMethod<[], [string], "view">;

  platformFee: TypedContractMethod<[], [bigint], "view">;

  purchaseCourse: TypedContractMethod<
    [courseId: BigNumberish],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  toggleCourseStatus: TypedContractMethod<
    [courseId: BigNumberish],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  updateCourse: TypedContractMethod<
    [courseId: BigNumberish, newPrice: BigNumberish, newMetadataURI: string],
    [void],
    "nonpayable"
  >;

  updatePlatformFee: TypedContractMethod<
    [newFee: BigNumberish],
    [void],
    "nonpayable"
  >;

  userHasAccess: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [boolean],
    "view"
  >;

  withdrawRevenue: TypedContractMethod<
    [courseId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "courseRevenue"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "courses"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, string, boolean, bigint] & {
        creator: string;
        price: bigint;
        metadataURI: string;
        active: boolean;
        revenueShare: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "createCourse"
  ): TypedContractMethod<
    [price: BigNumberish, metadataURI: string, revenueShare: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getCourse"
  ): TypedContractMethod<
    [courseId: BigNumberish],
    [
      [string, bigint, string, boolean, bigint] & {
        creator: string;
        price: bigint;
        metadataURI: string;
        active: boolean;
        revenueShare: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "nextCourseId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "paymentToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "platformFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "purchaseCourse"
  ): TypedContractMethod<[courseId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "toggleCourseStatus"
  ): TypedContractMethod<[courseId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateCourse"
  ): TypedContractMethod<
    [courseId: BigNumberish, newPrice: BigNumberish, newMetadataURI: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updatePlatformFee"
  ): TypedContractMethod<[newFee: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "userHasAccess"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "withdrawRevenue"
  ): TypedContractMethod<[courseId: BigNumberish], [void], "nonpayable">;

  getEvent(
    key: "CourseCreated"
  ): TypedContractEvent<
    CourseCreatedEvent.InputTuple,
    CourseCreatedEvent.OutputTuple,
    CourseCreatedEvent.OutputObject
  >;
  getEvent(
    key: "CoursePurchased"
  ): TypedContractEvent<
    CoursePurchasedEvent.InputTuple,
    CoursePurchasedEvent.OutputTuple,
    CoursePurchasedEvent.OutputObject
  >;
  getEvent(
    key: "CourseStatusChanged"
  ): TypedContractEvent<
    CourseStatusChangedEvent.InputTuple,
    CourseStatusChangedEvent.OutputTuple,
    CourseStatusChangedEvent.OutputObject
  >;
  getEvent(
    key: "CourseUpdated"
  ): TypedContractEvent<
    CourseUpdatedEvent.InputTuple,
    CourseUpdatedEvent.OutputTuple,
    CourseUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "RevenueWithdrawn"
  ): TypedContractEvent<
    RevenueWithdrawnEvent.InputTuple,
    RevenueWithdrawnEvent.OutputTuple,
    RevenueWithdrawnEvent.OutputObject
  >;

  filters: {
    "CourseCreated(uint256,address,uint256,string)": TypedContractEvent<
      CourseCreatedEvent.InputTuple,
      CourseCreatedEvent.OutputTuple,
      CourseCreatedEvent.OutputObject
    >;
    CourseCreated: TypedContractEvent<
      CourseCreatedEvent.InputTuple,
      CourseCreatedEvent.OutputTuple,
      CourseCreatedEvent.OutputObject
    >;

    "CoursePurchased(uint256,address)": TypedContractEvent<
      CoursePurchasedEvent.InputTuple,
      CoursePurchasedEvent.OutputTuple,
      CoursePurchasedEvent.OutputObject
    >;
    CoursePurchased: TypedContractEvent<
      CoursePurchasedEvent.InputTuple,
      CoursePurchasedEvent.OutputTuple,
      CoursePurchasedEvent.OutputObject
    >;

    "CourseStatusChanged(uint256,bool)": TypedContractEvent<
      CourseStatusChangedEvent.InputTuple,
      CourseStatusChangedEvent.OutputTuple,
      CourseStatusChangedEvent.OutputObject
    >;
    CourseStatusChanged: TypedContractEvent<
      CourseStatusChangedEvent.InputTuple,
      CourseStatusChangedEvent.OutputTuple,
      CourseStatusChangedEvent.OutputObject
    >;

    "CourseUpdated(uint256,uint256,string)": TypedContractEvent<
      CourseUpdatedEvent.InputTuple,
      CourseUpdatedEvent.OutputTuple,
      CourseUpdatedEvent.OutputObject
    >;
    CourseUpdated: TypedContractEvent<
      CourseUpdatedEvent.InputTuple,
      CourseUpdatedEvent.OutputTuple,
      CourseUpdatedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "RevenueWithdrawn(address,uint256)": TypedContractEvent<
      RevenueWithdrawnEvent.InputTuple,
      RevenueWithdrawnEvent.OutputTuple,
      RevenueWithdrawnEvent.OutputObject
    >;
    RevenueWithdrawn: TypedContractEvent<
      RevenueWithdrawnEvent.InputTuple,
      RevenueWithdrawnEvent.OutputTuple,
      RevenueWithdrawnEvent.OutputObject
    >;
  };
}
